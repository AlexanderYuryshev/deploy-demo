services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_CLIENTVAR: "clientvar"
    working_dir: /app
    ports:
      - "3000:3000"
    env_file:
      - .env
    networks:
      - demo-network
  db:
    image: postgres:15-alpine
    env_file:
      - .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - demo-network
    restart: unless-stopped
  migration:
    build: ./prisma
    env_file:
      - .env
    networks:
      - demo-network
    depends_on: 
      db:
        condition: service_healthy
        restart: true
    ports:
      - 8080:8080
  bot:
    build: ./bot
    env_file:
      - .env
    networks:
      - demo-network
    depends_on: 
      db:
        condition: service_healthy
        restart: true

volumes:
  postgres-data:

networks:
  demo-network:
     driver: bridge