name: Docker Deploy

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./Dockerfile
            context: .
            tag: deploy-demo-app:latest
          - dockerfile: ./prisma/Dockerfile
            context: ./prisma
            tag: deploy-demo-migration:latest
          - dockerfile: ./bot/Dockerfile
            context: ./bot
            tag: deploy-demo-bot:latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.tag }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Write SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          host=${{ secrets.SSH_HOST }}
          hosts="$(dig +short "$host" | grep -v '\.$' | sed -z 's|\n|,|g')$host"
          ssh-keyscan -H "$hosts" > ~/.ssh/known_hosts
      - name: Create Docker compose config
        run: |
          cat ./docker-compose-prod.yml | envsubst > docker-compose.yml
      - name: Copy Docker compose config
        run: scp docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/app/docker-compose.yml
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: '1h'
          script: |
            cd /app
            rm -rf .env
            touch .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER}}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD}}" >> .env
            echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE}}" >> .env
            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN}}" >> .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            docker compose down -v
            docker compose pull
            docker compose up -d db app migration bot --force-recreate
            docker image prune -af
      - name: Cleanup config
        if: always()
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "rm -rf /app/docker-compose.yml"
      - name: Cleanup keys
        if: always()
        run: rm -rf ~/.ssh docker-compose.yml
